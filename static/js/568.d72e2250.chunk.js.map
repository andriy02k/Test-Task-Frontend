{"version":3,"file":"static/js/568.d72e2250.chunk.js","mappings":"4KAEO,MAAMA,E,OAAMC,EAAMC,OAAO,CAC9BC,QAAS,oCCDEC,EAAWC,UACtB,MAAM,KAAEC,SAAeN,EAAIO,IAAI,KAC/B,OAAOD,CAAI,EAGAE,EAAcH,UACzB,MAAM,KAAEC,SAAeN,EAAIO,IAAI,IAAIE,KACnC,OAAOH,CAAI,EAQAI,EAAaL,MAAOI,EAAIE,KACnC,MAAM,KAAEL,SAAeN,EAAIY,IAAI,IAAIH,IAAME,GACzC,OAAOL,CAAI,EAGAO,EAAaR,UACxB,MAAM,KAAEC,SAAeN,EAAIc,OAAO,IAAIL,KACtC,OAAOH,CAAI,EAGAS,EAAcV,MAAOI,EAAIO,KACpC,MAAM,KAAEV,SAAeN,EAAIiB,KAAK,IAAIR,aAAeO,GACnD,OAAOV,CAAI,C,qFCzBb,MA2FA,EA3FaY,KACX,MAAM,GAAET,IAAOU,EAAAA,EAAAA,MACRC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAC1BC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,KAG7CG,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAYrB,UAChB,IACE,MAAMsB,QAAiBnB,EAAAA,EAAAA,IAAYC,GACnCY,EAAQM,EACV,CAAE,MAAOC,GACPC,QAAQD,MAAMA,EAChB,GAGFF,IACA,MAAMI,EAAWC,YAAYL,EAAW,KAExC,MAAO,IAAMM,cAAcF,EAAS,GACnC,CAACrB,IAEJ,MAgBMwB,EAAWC,IACf,MAAMC,EAAO,IAAIC,KAAKF,GAYtB,MAVsB,GAAGC,EAAKE,mBAAmB,QAAS,CACxDC,KAAM,UACNC,MAAO,UACPC,IAAK,eACDL,EAAKM,mBAAmB,QAAS,CACrCC,KAAM,UACNC,OAAQ,UACRC,QAAQ,KAGU,EAOtB,OAAKxB,GAIHyB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CACG3B,EAAK4B,UAAU,IAAE5B,EAAK6B,YAExB7B,EAAK8B,UAAY9B,EAAK8B,SAASC,OAAS,EACvC/B,EAAK8B,SAASE,KAAIC,IAAA,IAAC,IAAEC,EAAG,KAAEC,EAAI,UAAEC,GAAWH,EAAA,OACzCR,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CACGQ,EAAK,KAACE,EAAAA,EAAAA,KAAA,SACNxB,EAAQuB,KAFHF,EAGJ,KAGNG,EAAAA,EAAAA,KAAA,KAAAV,SAAG,mBAGPF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEU,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,MAAOpC,EACPqC,SA5BmBC,IACzBrC,EAAcqC,EAAMC,OAAOH,MAAM,EA4B3BI,YAAY,uBAEdN,EAAAA,EAAAA,KAAA,UAAQO,QA/DY3D,UACxB,GAAKkB,EAEL,UACQR,EAAAA,EAAAA,IAAYN,EAAI,CACpB8C,KAAMhC,EACN0C,OAAQ,GAAG7C,EAAK4B,aAAa5B,EAAK6B,aAGpCzB,EAAc,GAEhB,CAAE,MAAOI,GACPC,QAAQD,MAAMA,EAChB,GAkDuCmB,SAAC,gBA1BjCU,EAAAA,EAAAA,KAAA,OAAAV,SAAK,cA4BT,C","sources":["api/api.js","api/chatApi.js","components/Chat/Chat.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const api = axios.create({\r\n  baseURL: \"http://localhost:8080/api/chats\",\r\n});\r\n","import { api } from \"./api\";\r\n\r\nexport const getChats = async () => {\r\n  const { data } = await api.get(`/`);\r\n  return data;\r\n};\r\n\r\nexport const getChatById = async (id) => {\r\n  const { data } = await api.get(`/${id}`);\r\n  return data;\r\n};\r\n\r\nexport const createChat = async (userData) => {\r\n  const { data } = await api.post(`/`, userData);\r\n  return data;\r\n};\r\n\r\nexport const updateChat = async (id, newData) => {\r\n  const { data } = await api.put(`/${id}`, newData);\r\n  return data;\r\n};\r\n\r\nexport const deleteChat = async (id) => {\r\n  const { data } = await api.delete(`/${id}`);\r\n  return data;\r\n};\r\n\r\nexport const sendMessage = async (id, message) => {\r\n  const { data } = await api.post(`/${id}/messages`, message);\r\n  return data;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getChatById, sendMessage } from \"../../api/chatApi\";\r\n\r\nconst Chat = () => {\r\n  const { id } = useParams();\r\n  const [chat, setChat] = useState(null);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  // const [refresh, setRefresh] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchChat = async () => {\r\n      try {\r\n        const chatData = await getChatById(id);\r\n        setChat(chatData);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchChat();\r\n    const interval = setInterval(fetchChat, 1000); // Полінг кожні 5 секунд\r\n\r\n    return () => clearInterval(interval);\r\n  }, [id]);\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!newMessage) return;\r\n\r\n    try {\r\n      await sendMessage(id, {\r\n        text: newMessage,\r\n        sender: `${chat.firstName} ${chat.lastName}`,\r\n      });\r\n\r\n      setNewMessage(\"\");\r\n      // setRefresh(!refresh);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const getDate = (curentDate) => {\r\n    const date = new Date(curentDate);\r\n\r\n    const formattedDate = `${date.toLocaleDateString(\"en-US\", {\r\n      year: \"numeric\",\r\n      month: \"2-digit\",\r\n      day: \"2-digit\",\r\n    })} ${date.toLocaleTimeString(\"en-US\", {\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n      hour12: true,\r\n    })}`;\r\n\r\n    return formattedDate;\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    setNewMessage(event.target.value);\r\n  };\r\n\r\n  if (!chat) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  return (\r\n    <>\r\n      <div>\r\n        <h1>\r\n          {chat.firstName} {chat.lastName}\r\n        </h1>\r\n        {chat.messages && chat.messages.length > 0 ? (\r\n          chat.messages.map(({ _id, text, createdAt }) => (\r\n            <p key={_id}>\r\n              {text} <br />\r\n              {getDate(createdAt)}\r\n            </p>\r\n          ))\r\n        ) : (\r\n          <p>Start chat</p>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={newMessage}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Type your message\"\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"names":["api","axios","create","baseURL","getChats","async","data","get","getChatById","id","updateChat","newData","put","deleteChat","delete","sendMessage","message","post","Chat","useParams","chat","setChat","useState","newMessage","setNewMessage","useEffect","fetchChat","chatData","error","console","interval","setInterval","clearInterval","getDate","curentDate","date","Date","toLocaleDateString","year","month","day","toLocaleTimeString","hour","minute","hour12","_jsxs","_Fragment","children","firstName","lastName","messages","length","map","_ref","_id","text","createdAt","_jsx","type","value","onChange","event","target","placeholder","onClick","sender"],"sourceRoot":""}